// Copyright (C) 2023 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \page whatsnew69.html
    \title What's New in Qt 6.9
    \ingroup whatsnewqt6
    \brief Lists the new features in Qt 6.9.

    \section1 New and Restored Modules in Qt 6.9
    Qt 6.9 adds the following modules and tools:

    \list
    \endlist

    \section1 Removed Modules in Qt 6.9
    The following module(s) is deprecated. We strongly advise against using them
    in new code.

    \list
    \endlist

    \section1 New Features in Qt 6.9

    \section2 Qt Core Module
    \list
        \li QJniArray can now create an empty array of a fixed size, and change
            values in an array using a non-const iterator or \l{QJniArray::}{operator[]}
        \li QLocale::uiLanguages() now includes fall-back entries obtained by
            removing later components of names. Callers that have been doing
            such truncations for themselves are now encouraged to trust that
            QLocale knows the right things to try and the right order to try
            them in.
        \li QLocale::bcp47Name() now represents the C locale as "en-POSIX", to
            distinguish it from plain "en" and better align with the BCP47 spec.
            The variant POSIX is likewise now recognized as meaning the C
            locale, when constructing one from its name.
        \li QTimeZone::abbreviation() on Windows now returns an abbreviation
            rather than the full name.
        \li QTimeZone::displayName() should now actually provide
            locale-appropriate names for zones on all platforms, where
            previously some failed to support this.
        \li Converting timestamp strings with a timezone part to QDateTime
            now recognizes long-form display names of zones.
        \li QMetaEnum and QFlags can now support types requiring up to 64-bits.
    \endlist

    \section2 Qt Graphs Module
    \list
        \li Added transparency support to Surface3D, utilizing order-independent transparency
            from QtQuick3D. Only approximate technique (WeightedBlended) has been implemented
            to QtQuick3D this far, so no accurate techniques can be used yet.
        \li Added \c rootNode property to allow injecting graphs to a View3D in QtQuick3D
            applications.
        \li Added another picking method, \c {doRayPicking}, to be used with View3D graph
            injections.
        \li Added \c QSpline3DSeries class to allow users render their data in splines.
        \li Added \c valueColoringEnabled property to Bars3D, which allows each bar to be
            colored separately based on its value.
        \li Added \c scaleLabelsByCount property to QAbstract3DAxis, allowing users to define
            whether axis labels should be scaled based on the total amount of labels.
        \li Added \c labelSize property to QAbstract3DAxis, allowing users to set the sizes
            of axis labels by each axis.
        \li Added support for setting the minimum and maximum rotations in X and Y directions
            to Bars3D, Scatter3D, and Surface3D.
        \li Added \c alignment property to QAbstractAxis, allowing users to align axes left,
            right, top, or bottom.
        \li Added \c plotArea property to QGraphsView, allowing users to define the rectangle a
            graph will be drawn in.
        \li Added zooming and panning support to QGraphsView.
        \li Added custom input handling support to area, line, pie, and scatter graphs.
    \endlist

    \section2 Qt GRPC Module
    \list
    \endlist

    \section2 Qt GUI Module
    \list
        \li QBrush and QPen got optimized operators for comparing with or
            assigning from color and style values.
        \li QPainter::setBrush() got new optimized overloads for setting a color
            as a solid brush.
        \li QPainterStateGuard is a new RAII class to ensure balanced
            save/restore operations on a QPainter.
        \li Added QWindow::safeAreaMargins() to reflect the safe area of the window.
        \li Added parsing and automatic detection of emoji sequences in text, ensuring the use of
            color fonts when needed as according to the Unicode specification. This parser can
            be disabled per layout using QTextOption::DisableEmojiParsing, or by disabling the
            emoji segmenter when configuring Qt.
        \li Added QFontDatabase::addApplicationEmojiFontFamily() and related functions for
            customizing the default emoji font used by the application.
        \li Added QFontInfo::variableAxes() for retrieving information about the variable axes
            supported by a font.
        \li QRhi: when running with OpenGL ES on mobile GPUs with support present,
            GL_EXT_multisampled_render_to_texture is utilized whenever possible. For
            clients such as Qt Quick and Qt Quick 3D this potentially brings significant
            performance improvements in multisampled rendering on tiled GPU architectures.
        \li QRhi: On Windows with Direct 3D 11 and 12, QWindow update requests are now driven
            by a dedicated vblank watcher thread, reducing CPU load and latency. This
            means that clients such as Qt Quick are expected to have a reduced lag when
            interactively dragging items by mouse or touch for example.
        \li QRhi: Added support for variable rate shading, where applicable (Direct 3D 12, Vulkan,
            Metal). This enables dynamic foveation support with Qt Quick 3D XR on visionOS.
        \li QRhi: Per-render target blending is now optionally supported for OpenGL as well.
        \li QRhi: Added support for a number of integer and depth texture formats.
        \li QRhi: Added support for passing in application-provided wait/signal semaphores
            when on Vulkan. These are then passed on to to vkQueueSubmit and Present, thus
            allowing integration of external rendering/compute engines that rely on
            multiple threads and require appropriate synchronization with the scenegraph
            renderer.
    \endlist

    \section2 Qt HttpServer Module
    \list
    \endlist

    \section2 Qt Multimedia Module
    \list
    \endlist

    \section2 Qt Network Module
    \list
    \endlist

    \section2 Qt Network Auth Module
    \list
    \endlist

    \section2 Qt OPCUA Module
    \list
    \endlist

    \section2 Qt Positioning Module
    \list
    \endlist

    \section2 Qt Protobuf Module
    \list
    \endlist

    \section2 Qt QML Module
    \list
        \li QML Language Server now provides an outline view of the document
            structure. This allows clients (e.g., IDEs or code editors) to represent
            a qml documentâ€™s structure as an interactive outline, displaying objects,
            properties, methods and other code elements in a hierarchical view.
        \li Added the maximum line length feature to qmlformat: qmlformat now controls
            where to break lines based on a maximum allowed line length, ensuring a consistent
            and readable QML document.
    \endlist
    \section3 Qt Quick Compiler
    \list
    \endlist


    \section2 Qt Quick Module
    \list
        \li Added SafeArea attached property to manage safe areas of an Item or Window.
        \li Added Shear component for a convenient way of applying shearing transforms to
            items.
        \li Added FontMetrics.capitalHeight property which was previously missing from the Qt Quick
            API.
        \li Added FontInfo type for retrieving the results of font resolution, matching the
            QFontInfo class in C++.
        \li Reintroduced support for the FramebufferObject rendering mode of QQuickPaintedItem when
            the graphics API in use is OpenGL. This is provided as a porting aid for Qt 5 era
            applications that require the use of QPainter's legacy OpenGL paint engine for their
            QQuickPaintedItems.
        \li Optimized the scenegraph renderer's buffer pooling logic to prevent spikes in memory
            usage in scenes with large geometries. Additionally, there is a reduction in overhead
            for scenes with a lot of items, in particular when running with OpenGL.
    \endlist

    \section2 Qt Quick Controls Module
    \list
        \li Added ContextMenu. This can be attached to any item in order to
            show a context menu upon a platform-specific event, such as a right
            click or the context menu key.
    \endlist

    \section2 Qt Quick Dialogs
    \list
    \endlist

    \section2 Qt Quick Shapes Module
    \list
    \endlist

    \section2 Qt Quick Effects Module
    \list
        \li New RectangularShadow element for fast rounded rectangle shaped
            shadow/glow. The API is similar to CSS box-shadow, with color,
            offset, spread and blur values.
    \endlist

    \section2 Qt Quick 3D Module
    \list
    \endlist

    \section2 Qt Quick 3D XR Module
    \list
    \endlist

    \section2 Qt Quick VectorImage Module
    \list
    \endlist

    \section2 Qt Shader Tools Module
    \list
    \endlist

    \section2 Qt Sql Module
    \list
        \li QSqlDriver gained a new function \l{QSqlDriver::}{connectionName()}
            which returns the connection name of the associated QSqlDatabase
            instance.
        \li QSqlQueryModel can now refresh the database with
            \l{QSqlQueryModel::}{refresh()} when e.g. the database was modified
            from outside of Qt so it needs to be re-read.
    \endlist

    \section2 Qt SVG Module
    \list
    \endlist

    \section2 Qt Test Module
    \list
    \endlist

    \section2 Qt VirtualKeyboard Module
    \list
        \li Added a new Japanese layout which uses flick keys.
        \li Added support for adjusting key sound volume.
    \endlist

    \section2 Qt WebEngine Module
    \list
    \endlist

    \section2 Qt Widgets Module
    \list
        \li QAbstractItemView got a new property \l{QAbstractItemView::}{updateThreshold}
            to specify when a full view update should be done instead trying to figure
            out the parts where something changed within dataChanged(). This is
            especially useful when a lot of items change in a large model as the update
            rect calculation might take longer than a full view update.
        \li QComboBox can draw its label using the item view's delegate by setting
            the \l{QComboBox::}{labelDrawingMode} property to \l{QComboBox::}{UseDelegate}.
        \li QHeaderView has been optimized to dramatically reduce memory usage
            for huge models as long as the sections are not resized, hidden or
            reordered.
    \endlist

    \section1 Tools

    \section2 QDoc Documentation Generator
    \list
        \li QDoc now accepts formatting commands in macro arguments.
        \li Authors can now override the underlying return type of a function
            that's documented with an \l {fn-command} {fn}-command with \c auto.
        \li QDoc can now generate documentation from comments in C++ headers.
            This is added as a technical preview in QDoc with Qt 6.9, and we'd
            love to get feedback from our users. Enable the
            \l {documentationinheaders-variable} {documentationinheaders}
            QDoc configuration variable to try it out.
        \li QML enumeration documentation can be generated from C++ enumerations
            with the new \l {qmlenumeratorsfrom-command} {qmlenumeratorsfrom}
            command.
        \li The \l {generatelist-command} {generatelist} and
            \l {annotatedlist-command} {annotatedlist} commands now support
            custom sort order for the generated lists.
        \li \l {deprecated-command} {deprecated} accepts future versions, and
            QDoc generates appropriate text when it recognizes a version as
            being in the future.
        \li Clang library requirements: QDoc requires Clang libraries from
            LLVM 17. It's also confirmed to work with Clang libraries from
            LLVM 18, 19, and 20.
        \li QDoc now supports adjusting the CMake requisites for third-party
            projects with the \l {cmakecomponent-command} {cmakecomponent},
            \l {cmakepackage-command} {cmakepackage}, and
            \l {cmaketargetitem} {cmaketargetitem} commands.
        \li Example-related warnings are now configurable through the new
            \l {examples.warnaboutmissingimages-variable} {examples.warnaboutmissingimages}
            and
            \l {examples.warnaboutmissingprojectfiles-variable} {examples.warnaboutmissingprojectfiles}
            configuration variables.
    \endlist

    \section1 Platform Changes

    \section2 Build System Changes

    \list
        \li Building Qt and using Qt in CMake projects now requires CMake version 3.22 or
            later.
    \endlist

    \section2 Desktop Platforms

    \section3 macOS
    \list
    \endlist

    \section3 WebAssembly
    \list
    \endlist

    \section3 Windows
    \list
    \endlist

    \section3 Wayland Client on Linux
    \list
        \li Added support for the new \c{xdg-toplevel-icon-v1} protocol to make
            \c{QWindow::setIcon} work if the compositor supports this protocol
            as well.
        \li The underlying \c{wl_surface} of a window now shares its lifetime
            and is no longer destroyed when the window is hidden.
    \endlist

    \section2 Mobile Platforms

    \section3 Android
    \list
        \li Support uncompressed native libs within APKs and remove the need
            for \c {packagingOptions.jniLibs.useLegacyPackaging true}.
        \li Introduce \l {qt_add_android_permission()} CMake function.
        \li Add \l QT_ANDROID_COMPILE_SDK_VERSION CMake property to set the SDK
            level for building Java code.
        \li Add \l QT_ANDROID_APP_ICON CMake property to set an app's icon.
        \li Add \l QT_ANDROID_APP_NAME CMake property to set an app's name.
        \li Decouple location and bluetooth permissions for API level 31+.
        \li Allow setting a maximum for queued background UI events.
        \li Add script to easily deploy, run apps and get logs from terminal.
        \li QML for Android and QtQuickView:
        \list
            \li Add setData() and dataChanged() methods to QtAbstractItemModel.
            \li Add OnDataChangedListerner callback interface.
            \li QtQuickViewContent: Add onStatusChanged() overload that passes
                the underlying QtQuickViewContent object.
            \li Support multiple embedded views from an Android Service.
        \endlist
    \endlist

    \section3 iOS
    \list
    \endlist

    \section3 visionOS
    \list
    \endlist

    \section2 Embedded Platforms

    \section3 Boot to Qt
    \list
    \endlist

    \section3 RealTime OSs
    \list
    \endlist

    \section1 List of API Changes

    These pages contain an overview of API changes in Qt 6.9:
    \list
        \li \l {New Classes and Functions in Qt 6.9}
        \li \l {Obsolete Classes}
    \endlist
*/

/*!
    \page newclasses69.html
    \title New Classes and Functions in Qt 6.9
    \ingroup whatsnewqt6-api
    \brief A list of new APIs in Qt 6.9.

    This page contains a comprehensive list of all new classes and functions
    introduced in Qt 6.9.

    \sincelist 6.9
*/
